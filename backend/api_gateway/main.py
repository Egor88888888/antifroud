from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from jose import JWTError, jwt
from datetime import datetime, timedelta
from typing import Optional, Dict, List
from pydantic import BaseModel
from bpmn_handler import router as bpmn_router

# Constants
SECRET_KEY = "your-secret-key"  # In production, use environment variable
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

app = FastAPI(
    title="CRAFD API Gateway",
    description="""
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã CRAFD - –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∞–Ω—Ç–∏—Ñ—Ä–æ–¥-–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞.
    
    ### –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    * üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    * üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ø–∏—Å–∫–∞–º (—á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏, —Å–ø–∏—Å–∫–∏ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤ –∏ –¥—Ä.)
    * üìä –°–∫–æ—Ä–∏–Ω–≥ –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
    * üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    * üéØ –í—ã—è–≤–ª–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º
    * üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
    
    ### –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    * üë®‚Äçüíº –§—Ä–æ–¥-–∞–Ω–∞–ª–∏—Ç–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    * üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
    """,
    version="1.0.0"
)

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include BPMN router
app.include_router(bpmn_router, prefix="/api/processes", tags=["–ü—Ä–æ—Ü–µ—Å—Å—ã"])

# OAuth2 scheme
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Models with enhanced documentation
class Token(BaseModel):
    """–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    access_token: str
    token_type: str

class TokenData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ç–æ–∫–µ–Ω–µ"""
    username: Optional[str] = None
    role: Optional[str] = None

class User(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å–∏—Å—Ç–µ–º—ã"""
    username: str
    role: str
    disabled: Optional[bool] = None

    class Config:
        schema_extra = {
            "example": {
                "username": "analyst",
                "role": "fraud_analyst",
                "disabled": False
            }
        }

# Mock user database with enhanced documentation
fake_users_db = {
    "analyst": {
        "username": "analyst",
        "role": "fraud_analyst",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
        "disabled": False
    },
    "admin": {
        "username": "admin",
        "role": "admin",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
        "disabled": False
    }
}

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return User(**user)

@app.post("/token", response_model=Token, tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"])
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π.
    
    - **username**: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (analyst –∏–ª–∏ admin)
    - **password**: –ø–∞—Ä–æ–ª—å (–¥–ª—è –¥–µ–º–æ –ª—é–±–æ–π)
    """
    user = fake_users_db.get(form_data.username)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"], "role": user["role"]},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/me", response_model=User, tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
async def read_users_me(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return current_user

# Service routes with enhanced documentation
@app.get("/health", tags=["–°–∏—Å—Ç–µ–º–∞"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

# Proxy routes for microservices with enhanced documentation
@app.get("/api/identification/{client_id}", tags=["–ü—Ä–æ–≤–µ—Ä–∫–∏"])
async def get_client_identification(
    client_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    
    - **client_id**: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    """
    return {
        "client_id": client_id,
        "status": "verified",
        "verification_details": {
            "document_check": "passed",
            "face_match": "passed",
            "liveness_check": "passed"
        }
    }

@app.get("/api/lists/{client_id}", tags=["–ü—Ä–æ–≤–µ—Ä–∫–∏"])
async def check_client_lists(
    client_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Å–ø–∏—Å–∫–∞–º
    
    - **client_id**: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    """
    return {
        "client_id": client_id,
        "matches": [],
        "checked_lists": [
            "terrorist_list",
            "fraud_list",
            "pep_list"
        ]
    }

@app.get("/api/scoring/{client_id}", tags=["–ü—Ä–æ–≤–µ—Ä–∫–∏"])
async def get_client_scoring(
    client_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    
    - **client_id**: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    """
    return {
        "client_id": client_id,
        "risk_score": 0.5,
        "risk_factors": [
            "unusual_behavior",
            "recent_activity"
        ],
        "recommendation": "additional_verification"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 